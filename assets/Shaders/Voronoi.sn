$name Voronoi Texture

@input vec2 vector 0.0,0.0
@input constant float scale 5.0
@input constant float seed 1.5

@local result
@static voronoi

@output vec4 color
@output float distance

#import ShaderLib/random.glsllib

<static>

vec4 voronoi(vec2 uv, float scale, float seed) {
    
    uv *= scale;
    
    // divide the space into a grid, with i being the cell index,
    // and f being the location relative to the cell (or cell space)
    vec2 i = floor(uv);
    vec2 f = fract(uv);
  
    float minDist = 100.0;
    vec2 minPoint = vec2(0.0);
    
    // iterate through this cell and the 8 surrounding cells
    for (int y = -1; y <= 1; y++) {
        for (int x = -1; x <= 1; x++) {
            // neighbor place in the grid
            vec2 neighbor = vec2(float(x), float(y));
            vec2 point = randomVec2(i + neighbor, seed);
            vec2 diff = neighbor + point - f;
            float dist = length(diff);
            if (dist < minDist) {
                minDist = dist;
                minPoint = point;
            }
        }
    }
    
    return vec4(randomVec3(vec3(minPoint, 0f), seed), minDist);
    
}

</static>
<main>

vec4 result = voronoi(vector, scale, seed);
vec4 color = vec4(result.rgb, 1.0);
float distance = result.a;

</main>
